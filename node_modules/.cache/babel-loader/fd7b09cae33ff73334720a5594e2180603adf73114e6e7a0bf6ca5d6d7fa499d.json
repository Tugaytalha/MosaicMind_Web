{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\w2021\\\\Desktop\\\\MosaicMind\\\\MosaicMind_Web\\\\src\\\\pages\\\\Machines.jsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from 'react';\nimport Machine from './Machine';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function Machines() {\n  _s();\n  const URL = `https://mosaicmind-web.onrender.com/get-counts`;\n  const [machines, setMachines] = useState({});\n  const calculateSuccessRate = (positiveFeedback, negativeFeedback) => {\n    if (positiveFeedback === 0 || negativeFeedback === 0) {\n      return \"Not enough data\";\n    }\n    return Math.round(positiveFeedback / (positiveFeedback + negativeFeedback) * 100);\n  };\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(URL);\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const json = await response.json();\n        setMachines(json[0]);\n      } catch (error) {\n        console.error('Failed to fetch:', error);\n      }\n    };\n    fetchData();\n  }, []);\n  const [isLoading, setIsLoading] = useState(true);\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(URL);\n        if (!response.ok) {\n          throw new Error('Network response was not ok');\n        }\n        const json = await response.json();\n        setMachines(json[0]);\n        setIsLoading(false);\n      } catch (error) {\n        console.error('Failed to fetch:', error);\n      }\n    };\n    fetchData();\n  }, []);\n  if (isLoading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 16\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-1\",\n        children: \"Choose a Machine\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"machines\",\n        children: [machines['r1-update-c'] && /*#__PURE__*/_jsxDEV(Machine, {\n          name: \"Machine 1\",\n          status: \"Online\",\n          updates: machines['r1-update-c'],\n          positiveFeedback: machines['r1-correct-c'],\n          negativeFeedback: machines['r1-fail-c'],\n          successRate: Math.round(machines['r1-correct-c'] / machines['r1-fail-c'] * 100)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Machine, {\n          name: \"Machine 1\",\n          status: machines['isOnline1'] === 1 ? 'Online' : 'Offline',\n          updates: machines['r1-update-c'],\n          positiveFeedback: machines['r1-correct-c'],\n          negativeFeedback: machines['r1-fail-c'],\n          successRate: calculateSuccessRate(machines['r4-correct-c'], machines['r4-fail-c'])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Machine, {\n          name: \"Machine 2\",\n          status: machines['isOnline2'] === 1 ? 'Online' : 'Offline',\n          updates: machines['r2-update-c'],\n          positiveFeedback: machines['r2-correct-c'],\n          negativeFeedback: machines['r2-fail-c'],\n          successRate: calculateSuccessRate(machines['r4-correct-c'], machines['r4-fail-c'])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Machine, {\n          name: \"Machine 3\",\n          status: machines['isOnline3'] === 1 ? 'Online' : 'Offline',\n          updates: machines['r3-update-c'],\n          positiveFeedback: machines['r3-correct-c'],\n          negativeFeedback: machines['r3-fail-c'],\n          successRate: calculateSuccessRate(machines['r4-correct-c'], machines['r4-fail-c'])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(Machine, {\n          name: \"Machine 4\",\n          status: machines['isOnline4'] === 1 ? 'Online' : 'Offline',\n          updates: machines['r4-update-c'],\n          positiveFeedback: machines['r4-correct-c'],\n          negativeFeedback: machines['r4-fail-c'],\n          successRate: calculateSuccessRate(machines['r4-correct-c'], machines['r4-fail-c'])\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"text-1\",\n        children: \"MosaicMind V1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true);\n  }\n}\n_s(Machines, \"RKubjJFtflw42aQQIT1MxRoT1QY=\");\n_c = Machines;\nvar _c;\n$RefreshReg$(_c, \"Machines\");","map":{"version":3,"names":["useEffect","useState","Machine","jsxDEV","_jsxDEV","Fragment","_Fragment","Machines","_s","URL","machines","setMachines","calculateSuccessRate","positiveFeedback","negativeFeedback","Math","round","fetchData","response","fetch","ok","Error","json","error","console","isLoading","setIsLoading","children","fileName","_jsxFileName","lineNumber","columnNumber","className","name","status","updates","successRate","_c","$RefreshReg$"],"sources":["C:/Users/w2021/Desktop/MosaicMind/MosaicMind_Web/src/pages/Machines.jsx"],"sourcesContent":["import { useEffect, useState } from 'react';\r\nimport Machine from './Machine';\r\n\r\nexport default function Machines() {\r\n\r\n\tconst URL = `https://mosaicmind-web.onrender.com/get-counts` \r\n\tconst [machines, setMachines] = useState({});\r\n\r\n    const calculateSuccessRate = (positiveFeedback, negativeFeedback) => {\r\n        if (positiveFeedback === 0 || negativeFeedback === 0) {\r\n            return \"Not enough data\"\r\n        }\r\n        return Math.round((positiveFeedback / (positiveFeedback + negativeFeedback)) * 100);\r\n    };\r\n\r\n\tuseEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const response = await fetch(URL);\r\n                if (!response.ok) {\r\n                    throw new Error('Network response was not ok');\r\n                }\r\n                const json = await response.json();\r\n\t\t\t\tsetMachines(json[0]);\r\n            } catch (error) {\r\n                console.error('Failed to fetch:', error);\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    const [isLoading, setIsLoading] = useState(true);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            try {\r\n                const response = await fetch(URL);\r\n                if (!response.ok) {\r\n                    throw new Error('Network response was not ok');\r\n                }\r\n                const json = await response.json();\r\n                setMachines(json[0]);\r\n                setIsLoading(false);\r\n            } catch (error) {\r\n                console.error('Failed to fetch:', error);\r\n            }\r\n        };\r\n\r\n        fetchData();\r\n    }, []);\r\n\r\n    if (isLoading) {\r\n        return <div>Loading...</div>;\r\n    }else{\r\n        return (\r\n            <>\r\n                <br />\r\n                <br />\r\n                <div className=\"text-1\">Choose a Machine</div>\r\n                <br />\r\n                    <div className=\"machines\">\r\n                    {machines['r1-update-c'] && (\r\n            <Machine\r\n                name=\"Machine 1\"\r\n                status=\"Online\"\r\n                updates={machines['r1-update-c']}\r\n                positiveFeedback={machines['r1-correct-c']}\r\n                negativeFeedback={machines['r1-fail-c']}\r\n                successRate={Math.round((machines['r1-correct-c'] / machines['r1-fail-c']) * 100)}\r\n            />\r\n        )}\r\n                        {/* <Machine name=\"Machine 1\" status={machines['isOnline1'] === 1 ? 'Online' : 'Offline'} updates={machines['r1-update-c']} positiveFeedback={machines['r1-correct-c']} negativeFeedback={machines['r1-fail-c']} successRate={Math.round((machines['r1-correct-c']/machines['r1-fail-c'])*100)}/>\r\n                        <Machine name=\"Machine 2\" status={machines['isOnline2'] === 1 ? 'Online' : 'Offline'} updates={machines['r2-update-c']} positiveFeedback={machines['r2-correct-c']} negativeFeedback={machines['r2-fail-c']} successRate={Math.round((machines['r2-correct-c']/machines['r2-fail-c'])*100)}/>\r\n                        <Machine name=\"Machine 3\" status={machines['isOnline3'] === 1 ? 'Online' : 'Offline'} updates={machines['r3-update-c']} positiveFeedback={machines['r3-correct-c']} negativeFeedback={machines['r3-fail-c']} successRate={Math.round((machines['r3-correct-c']/machines['r3-fail-c'])*100)}/>\r\n                        <Machine name=\"Machine 4\" status={machines['isOnline4'] === 1 ? 'Online' : 'Offline'} updates={machines['r4-update-c']} positiveFeedback={machines['r4-correct-c']} negativeFeedback={machines['r4-fail-c']} successRate={Math.round((machines['r4-correct-c']/machines['r4-fail-c'])*100)}/> */}\r\n                        <Machine name=\"Machine 1\" status={machines['isOnline1'] === 1 ? 'Online' : 'Offline'} updates={machines['r1-update-c']} positiveFeedback={machines['r1-correct-c']} negativeFeedback={machines['r1-fail-c']} successRate = {calculateSuccessRate(machines['r4-correct-c'], machines['r4-fail-c'])}/>\r\n                        <Machine name=\"Machine 2\" status={machines['isOnline2'] === 1 ? 'Online' : 'Offline'} updates={machines['r2-update-c']} positiveFeedback={machines['r2-correct-c']} negativeFeedback={machines['r2-fail-c']} successRate = {calculateSuccessRate(machines['r4-correct-c'], machines['r4-fail-c'])}/>\r\n                        <Machine name=\"Machine 3\" status={machines['isOnline3'] === 1 ? 'Online' : 'Offline'} updates={machines['r3-update-c']} positiveFeedback={machines['r3-correct-c']} negativeFeedback={machines['r3-fail-c']} successRate = {calculateSuccessRate(machines['r4-correct-c'], machines['r4-fail-c'])}/>\r\n                        <Machine name=\"Machine 4\" status={machines['isOnline4'] === 1 ? 'Online' : 'Offline'} updates={machines['r4-update-c']} positiveFeedback={machines['r4-correct-c']} negativeFeedback={machines['r4-fail-c']} successRate = {calculateSuccessRate(machines['r4-correct-c'], machines['r4-fail-c'])}/>\r\n                </div>\r\n                <br />\r\n                <div className=\"text-1\">MosaicMind V1</div>\r\n            </>\r\n        );\r\n    }\r\n\r\n}\r\n"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,OAAO,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAEhC,eAAe,SAASC,QAAQA,CAAA,EAAG;EAAAC,EAAA;EAElC,MAAMC,GAAG,GAAI,gDAA+C;EAC5D,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,CAAC,CAAC,CAAC;EAEzC,MAAMW,oBAAoB,GAAGA,CAACC,gBAAgB,EAAEC,gBAAgB,KAAK;IACjE,IAAID,gBAAgB,KAAK,CAAC,IAAIC,gBAAgB,KAAK,CAAC,EAAE;MAClD,OAAO,iBAAiB;IAC5B;IACA,OAAOC,IAAI,CAACC,KAAK,CAAEH,gBAAgB,IAAIA,gBAAgB,GAAGC,gBAAgB,CAAC,GAAI,GAAG,CAAC;EACvF,CAAC;EAEJd,SAAS,CAAC,MAAM;IACT,MAAMiB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACV,GAAG,CAAC;QACjC,IAAI,CAACS,QAAQ,CAACE,EAAE,EAAE;UACd,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;QAClD;QACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACI,IAAI,CAAC,CAAC;QAC9CX,WAAW,CAACW,IAAI,CAAC,CAAC,CAAC,CAAC;MACZ,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;MAC5C;IACJ,CAAC;IAEDN,SAAS,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,MAAM,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGzB,QAAQ,CAAC,IAAI,CAAC;EAEhDD,SAAS,CAAC,MAAM;IACZ,MAAMiB,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACV,GAAG,CAAC;QACjC,IAAI,CAACS,QAAQ,CAACE,EAAE,EAAE;UACd,MAAM,IAAIC,KAAK,CAAC,6BAA6B,CAAC;QAClD;QACA,MAAMC,IAAI,GAAG,MAAMJ,QAAQ,CAACI,IAAI,CAAC,CAAC;QAClCX,WAAW,CAACW,IAAI,CAAC,CAAC,CAAC,CAAC;QACpBI,YAAY,CAAC,KAAK,CAAC;MACvB,CAAC,CAAC,OAAOH,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;MAC5C;IACJ,CAAC;IAEDN,SAAS,CAAC,CAAC;EACf,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIQ,SAAS,EAAE;IACX,oBAAOrB,OAAA;MAAAuB,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAChC,CAAC,MAAI;IACD,oBACI3B,OAAA,CAAAE,SAAA;MAAAqB,QAAA,gBACIvB,OAAA;QAAAwB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACN3B,OAAA;QAAAwB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACN3B,OAAA;QAAK4B,SAAS,EAAC,QAAQ;QAAAL,QAAA,EAAC;MAAgB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eAC9C3B,OAAA;QAAAwB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACF3B,OAAA;QAAK4B,SAAS,EAAC,UAAU;QAAAL,QAAA,GACxBjB,QAAQ,CAAC,aAAa,CAAC,iBAChCN,OAAA,CAACF,OAAO;UACJ+B,IAAI,EAAC,WAAW;UAChBC,MAAM,EAAC,QAAQ;UACfC,OAAO,EAAEzB,QAAQ,CAAC,aAAa,CAAE;UACjCG,gBAAgB,EAAEH,QAAQ,CAAC,cAAc,CAAE;UAC3CI,gBAAgB,EAAEJ,QAAQ,CAAC,WAAW,CAAE;UACxC0B,WAAW,EAAErB,IAAI,CAACC,KAAK,CAAEN,QAAQ,CAAC,cAAc,CAAC,GAAGA,QAAQ,CAAC,WAAW,CAAC,GAAI,GAAG;QAAE;UAAAkB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACrF,CACJ,eAKe3B,OAAA,CAACF,OAAO;UAAC+B,IAAI,EAAC,WAAW;UAACC,MAAM,EAAExB,QAAQ,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,QAAQ,GAAG,SAAU;UAACyB,OAAO,EAAEzB,QAAQ,CAAC,aAAa,CAAE;UAACG,gBAAgB,EAAEH,QAAQ,CAAC,cAAc,CAAE;UAACI,gBAAgB,EAAEJ,QAAQ,CAAC,WAAW,CAAE;UAAC0B,WAAW,EAAIxB,oBAAoB,CAACF,QAAQ,CAAC,cAAc,CAAC,EAAEA,QAAQ,CAAC,WAAW,CAAC;QAAE;UAAAkB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC,eACpS3B,OAAA,CAACF,OAAO;UAAC+B,IAAI,EAAC,WAAW;UAACC,MAAM,EAAExB,QAAQ,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,QAAQ,GAAG,SAAU;UAACyB,OAAO,EAAEzB,QAAQ,CAAC,aAAa,CAAE;UAACG,gBAAgB,EAAEH,QAAQ,CAAC,cAAc,CAAE;UAACI,gBAAgB,EAAEJ,QAAQ,CAAC,WAAW,CAAE;UAAC0B,WAAW,EAAIxB,oBAAoB,CAACF,QAAQ,CAAC,cAAc,CAAC,EAAEA,QAAQ,CAAC,WAAW,CAAC;QAAE;UAAAkB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC,eACpS3B,OAAA,CAACF,OAAO;UAAC+B,IAAI,EAAC,WAAW;UAACC,MAAM,EAAExB,QAAQ,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,QAAQ,GAAG,SAAU;UAACyB,OAAO,EAAEzB,QAAQ,CAAC,aAAa,CAAE;UAACG,gBAAgB,EAAEH,QAAQ,CAAC,cAAc,CAAE;UAACI,gBAAgB,EAAEJ,QAAQ,CAAC,WAAW,CAAE;UAAC0B,WAAW,EAAIxB,oBAAoB,CAACF,QAAQ,CAAC,cAAc,CAAC,EAAEA,QAAQ,CAAC,WAAW,CAAC;QAAE;UAAAkB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC,eACpS3B,OAAA,CAACF,OAAO;UAAC+B,IAAI,EAAC,WAAW;UAACC,MAAM,EAAExB,QAAQ,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,QAAQ,GAAG,SAAU;UAACyB,OAAO,EAAEzB,QAAQ,CAAC,aAAa,CAAE;UAACG,gBAAgB,EAAEH,QAAQ,CAAC,cAAc,CAAE;UAACI,gBAAgB,EAAEJ,QAAQ,CAAC,WAAW,CAAE;UAAC0B,WAAW,EAAIxB,oBAAoB,CAACF,QAAQ,CAAC,cAAc,CAAC,EAAEA,QAAQ,CAAC,WAAW,CAAC;QAAE;UAAAkB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACvS,CAAC,eACN3B,OAAA;QAAAwB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACN3B,OAAA;QAAK4B,SAAS,EAAC,QAAQ;QAAAL,QAAA,EAAC;MAAa;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC;IAAA,eAC7C,CAAC;EAEX;AAEJ;AAACvB,EAAA,CApFuBD,QAAQ;AAAA8B,EAAA,GAAR9B,QAAQ;AAAA,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}